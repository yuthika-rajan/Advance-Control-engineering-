About
=====

``rcognita`` is a framework for dynamic programming and reinforcement learning algorithm development, testing, and simulation.
The framework offers a playground of ready presets consisting of agents (controllers) and environments (dynamical systems). 
The core of the framework is ``regelum`` - a flexible universe of interconnected modules realizing a learn-in-the-loop concept, i.e., learning on the fly via data generated by the system.
A distinct feature of ``regelum`` is: the controllers and systems exist in the same universe, i.e., one can assemble a single preset combining both types of the said entities.

Table of content
================

* `Installation`_
    * `Linux <#seclinux>`_
    * `Windows`_
* `Description`_
* `Usage`_
    * `Settings`_
    * `Advanced customization`_
* `References`_

Installation
============

Put the ``rcognita`` code into a desired folder.
It is presumed that the commands given in this section are executed inside the said ``rcognita`` folder.

.. _seclinux:

Linux
-----

`Table of content`_

This installation guide is based on a virtual environment concept.
We will use ``virtualenv``.

#. First, install ``pip`` if it is not yet available:

    ::

      sudo apt install python3-pip

#. Install ``virtualenv`` if it is not yet available:

    ::

      pip install virtualenv   

#. Create a virtual environment:

    ::

      python3 -m venv rcenv 

    Here, ``rcenv`` is the name - pick yours. 
    If you got
    
    ::

      The virtual environment was not created successfully because ensurepip is not available
          
    do:
    
    ::

      sudo apt install python3.10-venv
          
    That ``10`` might need to be adjusted to your Python version.
    Choose the Python interpreter of the created virtual environment.
    If you happen to use `VScode`, look at the bottom right corner: click on the interpreter name, choose ``python`` (or ``python3``) from ``.venv/bin folder``. 
    It should then say ``:venv``.
  
#. Activate the virtual environment:

    ::
    
      source rcenv/bin/activate

    If there no ``activate``, repeat the virtual environment creation step.
    You can check that you are using an interpreter of the virtual environment by typing:
    
    ::
          
      which python
      which python3
	  
#. Upgrade pip and setuptools if necessary:

    ::

      pip install --upgrade pip
      pip install --upgrade setuptools

#. Install dependencies via ``pip install`` as usual or use requirements as follows:

    ::

      pip install -r requirements.txt

#. If you installed everything manually, please create ``requirements.txt`` as follows:

    ::

      pip freeze > requirements.txt

#. Alternatively, use ``pipreqs`` package for automatic scan of the code to create ``requirements.txt``. First, install it:

    ::

      pip install pipreqs

#. Run

    ::

      pipreqs .
	
    This will try its best to create ``requirements.txt``, but use with care!

Windows
-------

`Table of content`_

It is safer to run ``rcognita`` using WSL, a Linux subsystem for Windows.
Here are the steps to install WSL 2 first.

#. First, check the available Linux distributions to install:

    ::

      wsl --list --online
	 
#. The output may be, say:

    ::

      The following is a list of valid distributions that can be installed.
      Install using 'wsl --install -d <Distro>'.

      NAME                                   FRIENDLY NAME
      Ubuntu                                 Ubuntu
      Debian                                 Debian GNU/Linux
      kali-linux                             Kali Linux Rolling
      Ubuntu-18.04                           Ubuntu 18.04 LTS
      Ubuntu-20.04                           Ubuntu 20.04 LTS
      Ubuntu-22.04                           Ubuntu 22.04 LTS
      OracleLinux_8_5                        Oracle Linux 8.5
      OracleLinux_7_9                        Oracle Linux 7.9
      SUSE-Linux-Enterprise-Server-15-SP4    SUSE Linux Enterprise Server 15 SP4
      openSUSE-Leap-15.4                     openSUSE Leap 15.4
      openSUSE-Tumbleweed                    openSUSE Tumbleweed

#. Pick one, say, Ubuntu and install it:

    ::

      wsl --install -d Ubuntu

    Read more `here <https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview>`__.

#. Run Linux terminal from SWL (Windows Run, type ``WSL`` or ``Ubuntu``). Update and upgrade.

    ::

      sudo apt update
      sudo apt upgrade
	
#. [Optional] install z shell.

    ::

      sudo apt install zsh
	
    Read more `here <https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH>`__.
  
#. [Optional] Install oh-my-zsh.

    ::

      sudo apt install curl
      sudo apt install git
      sh -c "$(curl -fsSL -k https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    Read more `here <https://ohmyz.sh/>`__.	

#. [Optional] Install pretty theme for oh-my-zsh.

    ::

      git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
	
      nano ~/.zshrc
	
    And set the theme, write in ~/.zshrc:
    
    ::

      ZSH_THEME="powerlevel10k/powerlevel10k"
	
    Reload:
    
    ::
  
      exec zsh
	
    Answer the questions as you desire.
    Read more `here <https://github.com/romkatv/powerlevel10k#installation>`__.

#. Just browse to the ``rcognita`` folder, ``Shift`` + right click and open a Linux terminal. Type ``code .`` and reproduce the steps described in `Linux <#seclinux>`_ Section.

#. [Optional] If you happen to use `VScode`, install the ``WSL`` plugin. Do not forget to restart `VScode`.

#. When using WSL, an X server may be required to render graphics. To this end, install `Xming X` server for Windows following, say, `this guide <https://sourceforge.net/projects/xming/>`_.

#. Type in the `VScode` terminal:

    ::

      export DISPLAY=localhost:0.0
	
    or set it up permanently in shell config:
    
    ::

      nano ~/.zshrc
	
    Go all the way down and add a line:
    
    ::

      export DISPLAY=localhost:0.0
	
12. Always make sure that `Xming X` server is running in Windows. This can be done via an autostart.

Description
===========

`Table of content`_

``rcognita`` Python package is designed for hybrid simulation of agents and environments (generally speaking, not necessarily reinforcement learning agents).
Its main idea is to have an explicit implementation of sampled controls with user-defined sampling time specification.
The package consists of several modules, namely, ``controllers``, ``loggers``, ``models``, ``simulator``, ``systems``, ``utilities``, ``visuals`` and a collection of main modules (presets) for each agent-environment configuration.

The main module is a preset, e.g., a 3-wheel robot.
It initializes the system (the environment), the controllers (the agents, e.g., a safe agent, a benchmarking agent, a reinforcement learning agent etc.), the visualization engine called animator, the logger and the simulator.
The latter is a multi-purpose device for simulating agent-environment loops of different types (specified by ``sys_type``).

Depending on ``sys_type``, the environment can either be described by a differential equation (including stochastic ones), a difference equation (for discrete-time systems), or by a probability distribution
(for, e.g., a Markov chain).

The parameter ``dt`` determines the maximal step size for the numerical solver in case of differential equations.
The main method of this class is ``sim_step`` which performs one solver step, whereas reset re-initializes the simulator after an episode.

The ``Logger`` class is an interface defining stubs of a print-to-console method print sim step, and print-to-file method log data row, respectively. Concrete loggers realize these methods.

A similar class inheritance scheme is used in ``Animator``, and ``System``. The core data of ``Animator``\ ’s subclasses are ``objects``, which include entities to be updated on the screen, and their parameters stored in ``pars``.

A concrete realization of a system interface must realize ``sys_dyn``, which is the “right-handside” of the environment description, optionally disturbance dynamics via ``disturb_dyn``, optionally controller dynamics
(if the latter is, e.g., time-varying), and the output function ``out``.
The method ``receive_action`` gets a control action and stores it.
Everything is packed together in the ``closed_loop_rhs`` for the use in ``Simulator``.

Finally, the ``controllers`` module contains various agent types.
One of them is ``ControllerOptimalPredictive`` – the class of predictive objective-optimizing
agents (model-predictive control and predictive reinforcement learning).

The method ``_critic`` computes a model of something related to the value, e.g., value function, Q-function or advantage.
In turn, ``_critic_cost`` defines a cost (loss) function to fir the critic (commonly based on temporal errors). The method ``_critic_optimizer`` actually optimizes the critic cost.
The principle is analogous with the actor, except that it optimizes an objective along a prediction horizon.
The details can be found in the code documentation.
The method ``compute_action`` essentially watches the internal clock and performs an action updates when a time sample has elapsed.

Auxiliary modules of the package are ``models`` and ``utilities`` which provide auxiliary functions and data structures, such as neural networks.

Usage
=====

`Table of content`_

After the package is installed, you may just ``python`` run one of the presets found, say,

::

    python3 PRESET_3wrobot_NI.py

This will call the preset with default settings, description of which can be found in the preset accordingly.

The naming convention is ``PRESET_ACRONYM``, where ``ACRONYM`` is actually related to the system (environment). You may create your own by analogy.



To reproduce the results, you need to execute the script:
::

    bash launch.bash

**Attention!**

Results may vary on different machines (this may be related to the Python's internal libraries, numpy foremost)


For configuration of hyper-parameters, just call help on the required preset, say,

::

    python3 PRESET_3wrobot_NI.py -h

Settings
--------

`Table of content`_

Some key settings are described below (full description is available via
``-h`` option).

+-----------------------------+-----------+----------------------------------------------------------+
| Parameter                   | Type      | Description                                              |
+=============================+===========+==========================================================+
| ``ctrl_mode``               | string    | Controller mode                                          |
+-----------------------------+-----------+----------------------------------------------------------+
| ``dt``                      | number    | Controller sampling time                                 |
+-----------------------------+-----------+----------------------------------------------------------+
| ``t1``                      | number    | Final time                                               |
+-----------------------------+-----------+----------------------------------------------------------+
| ``init_robot_pose_x``       | number    | initial state along the X axis                           |
+-----------------------------+-----------+----------------------------------------------------------+
| ``init_robot_pose_y``       | number    | initial state along the Y axis                           |
+-----------------------------+-----------+----------------------------------------------------------+
| ``init_robot_pose_theta``   | number    | initial orientation angle (in radians) of the robot pose |
+-----------------------------+-----------+----------------------------------------------------------+
| ``distortion_pos_x``        | number    | X-coordinate of the center of distortion                 |
+-----------------------------+-----------+----------------------------------------------------------+
| ``distortion_pos_y``        | number    | Y-coordinate of the center of distortion                 |
+-----------------------------+-----------+----------------------------------------------------------+
| ``distortion_sigma``        | number    | Standard deviation of distortion                         |
+-----------------------------+-----------+----------------------------------------------------------+
| ``is_log_data``             | integer   | Flag to log data (0/1)                                   |
+-----------------------------+-----------+----------------------------------------------------------+
| ``is_visualization``        | integer   | Flag to produce graphical output (0/1)                   |
+-----------------------------+-----------+----------------------------------------------------------+
| ``is_print_sim_step``       | integer   | Flag to print simulation step data (0/1)                 |
+-----------------------------+-----------+----------------------------------------------------------+
| ``Nactor``                  | integer   | Horizon length (in steps) for predictive controllers     |
+-----------------------------+-----------+----------------------------------------------------------+
| ``run_obj_struct``          | string    | Structure of running objective function                  |
+-----------------------------+-----------+----------------------------------------------------------+
| ``Ncritic``                 | integer   | Critic stack size (number of TDs)                        |
+-----------------------------+-----------+----------------------------------------------------------+
| ``gamma``                   | number    | Discount factor                                          |
+-----------------------------+-----------+----------------------------------------------------------+
| ``critic_struct``           | string    | Structure of critic features                             |
+-----------------------------+-----------+----------------------------------------------------------+
| ``actor_struct``            | string    | Structure of actor features                              |
+-----------------------------+-----------+----------------------------------------------------------+

Advanced customization
----------------------

`Table of content`_

-  **Custom environments**: realize ``system`` interface in the ``systems`` module. You might need nominal controllers for that, as well as an animator, a logger etc.
-  **Custom running cost**: adjust ``rcost`` in controllers.
-  **Custom AC method**: simplest way -- by adding a new mode and updating ``_actor_cost``, ``_critic_cost`` and, possibly, ``_actor``, ``_critic``. For deep net AC structures, use, say, `PyTorch <https://pytorch.org/>`__

Matrix and vector convention in rcognita
========================================

In the ``rcognita`` code, the following convention is used.

*  All vectors are treated as of type ``[n,]``.
*  All buffers are treated as of type ``[L, n]`` where each row is a vector.
*  Buffers are updated from bottom to top.
